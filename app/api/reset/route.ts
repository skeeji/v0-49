import { type NextRequest, NextResponse } from "next/server"
import clientPromise from "@/lib/mongodb"
import { GridFSBucket } from "mongodb"

const DBNAME = process.env.MONGO_INITDB_DATABASE || "luminaires"

export async function POST(request: NextRequest) {
  try {
    console.log("üóëÔ∏è API /api/reset - D√©but du reset complet")

    const client = await clientPromise
    const db = client.db(DBNAME)

    let deletedItems = 0

    // 1. Supprimer toutes les collections
    const collections = ["luminaires", "designers", "users", "favorites"]
    for (const collectionName of collections) {
      try {
        const result = await db.collection(collectionName).deleteMany({})
        deletedItems += result.deletedCount
        console.log(`üóëÔ∏è Collection ${collectionName}: ${result.deletedCount} documents supprim√©s`)
      } catch (error) {
        console.log(`‚ö†Ô∏è Collection ${collectionName} n'existe pas ou est d√©j√† vide`)
      }
    }

    // 2. Supprimer tous les fichiers GridFS
    try {
      const bucket = new GridFSBucket(db, { bucketName: "uploads" })
      const files = await bucket.find({}).toArray()

      for (const file of files) {
        await bucket.delete(file._id)
      }

      console.log(`üóëÔ∏è GridFS: ${files.length} fichiers supprim√©s`)
      deletedItems += files.length
    } catch (error) {
      console.log("‚ö†Ô∏è Aucun fichier GridFS √† supprimer")
    }

    // 3. Supprimer les collections GridFS
    try {
      await db.collection("uploads.files").drop()
      await db.collection("uploads.chunks").drop()
      console.log("üóëÔ∏è Collections GridFS supprim√©es")
    } catch (error) {
      console.log("‚ö†Ô∏è Collections GridFS d√©j√† supprim√©es")
    }

    console.log(`‚úÖ Reset termin√©: ${deletedItems} √©l√©ments supprim√©s au total`)

    return NextResponse.json({
      success: true,
      message: `Base de donn√©es compl√®tement vid√©e: ${deletedItems} √©l√©ments supprim√©s`,
      deletedItems,
    })
  } catch (error: any) {
    console.error("‚ùå Erreur critique lors du reset:", error)
    return NextResponse.json(
      {
        success: false,
        error: "Erreur serveur lors du reset",
        details: error.message,
      },
      { status: 500 },
    )
  }
}
