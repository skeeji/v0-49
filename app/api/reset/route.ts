import { type NextRequest, NextResponse } from "next/server"
import clientPromise from "@/lib/mongodb"
import { resetGridFS } from "@/lib/gridfs"

const DBNAME = process.env.MONGO_INITDB_DATABASE || "luminaires"

export async function DELETE(request: NextRequest) {
  try {
    console.log("üóëÔ∏è API /api/reset - D√©but de la r√©initialisation compl√®te")

    const client = await clientPromise
    const db = client.db(DBNAME)

    // 1. Supprimer toutes les collections MongoDB
    const collections = await db.listCollections().toArray()
    console.log(`üìã ${collections.length} collections trouv√©es`)

    for (const collection of collections) {
      await db.collection(collection.name).drop()
      console.log(`üóëÔ∏è Collection ${collection.name} supprim√©e`)
    }

    // 2. R√©initialiser GridFS
    await resetGridFS()

    console.log("‚úÖ R√©initialisation compl√®te termin√©e")

    return NextResponse.json({
      success: true,
      message: "Serveur r√©initialis√© avec succ√®s",
      deletedCollections: collections.length,
    })
  } catch (error: any) {
    console.error("‚ùå Erreur lors de la r√©initialisation:", error)
    return NextResponse.json(
      {
        success: false,
        error: "Erreur lors de la r√©initialisation",
        details: error.message,
      },
      { status: 500 },
    )
  }
}
