import { type NextRequest, NextResponse } from "next/server"
import clientPromise from "@/lib/mongodb"
import { getBucket } from "@/lib/gridfs"

const DBNAME = process.env.MONGO_INITDB_DATABASE || "luminaires"

export async function DELETE(request: NextRequest) {
  try {
    console.log("üóëÔ∏è API DELETE /api/reset appel√©e")

    const client = await clientPromise
    const db = client.db(DBNAME)
    const bucket = await getBucket()

    console.log("üóëÔ∏è Suppression des collections MongoDB...")
    await db.collection("luminaires").deleteMany({})
    await db.collection("designers").deleteMany({})
    await db.collection("timelineDescriptions").deleteMany({})
    await db.collection("welcomeVideos").deleteMany({})

    console.log("üóëÔ∏è Suppression des fichiers GridFS...")
    // R√©cup√©rer tous les fichiers dans le bucket
    const files = await bucket.find({}).toArray()

    // Supprimer chaque fichier individuellement
    for (const file of files) {
      await bucket.delete(file._id)
      console.log(`‚úÖ Fichier GridFS supprim√©: ${file.filename}`)
    }

    console.log("‚úÖ R√©initialisation termin√©e")

    return NextResponse.json({
      success: true,
      message: "Serveur r√©initialis√© avec succ√®s",
    })
  } catch (error: any) {
    console.error("‚ùå Erreur dans DELETE /api/reset:", error)
    return NextResponse.json(
      {
        success: false,
        error: "Erreur lors de la r√©initialisation du serveur",
        details: error.message,
      },
      { status: 500 },
    )
  }
}
