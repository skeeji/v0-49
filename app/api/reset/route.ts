import { type NextRequest, NextResponse } from "next/server"
import clientPromise from "@/lib/mongodb"
import { resetGridFS } from "@/lib/gridfs"

const DBNAME = process.env.MONGO_INITDB_DATABASE || "luminaires"

export async function DELETE(request: NextRequest) {
  try {
    console.log("üóëÔ∏è API DELETE /api/reset - D√©but de la r√©initialisation compl√®te")

    const client = await clientPromise
    const db = client.db(DBNAME)

    // Supprimer toutes les collections
    const collections = ["luminaires", "designers", "videos", "logos"]

    for (const collectionName of collections) {
      try {
        const result = await db.collection(collectionName).deleteMany({})
        console.log(`‚úÖ Collection ${collectionName} vid√©e: ${result.deletedCount} documents supprim√©s`)
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erreur lors de la suppression de ${collectionName}:`, error)
      }
    }

    // R√©initialiser GridFS
    try {
      await resetGridFS()
      console.log("‚úÖ GridFS r√©initialis√©")
    } catch (error) {
      console.warn("‚ö†Ô∏è Erreur lors de la r√©initialisation de GridFS:", error)
    }

    console.log("‚úÖ R√©initialisation compl√®te termin√©e")

    return NextResponse.json({
      success: true,
      message: "Base de donn√©es et GridFS r√©initialis√©s avec succ√®s",
      timestamp: new Date().toISOString(),
    })
  } catch (error: any) {
    console.error("‚ùå Erreur critique lors de la r√©initialisation:", error)
    return NextResponse.json(
      {
        success: false,
        error: "Erreur lors de la r√©initialisation",
        details: error.message,
      },
      { status: 500 },
    )
  }
}
