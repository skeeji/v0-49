import { GridFSBucket } from "mongodb"
import clientPromise from "./mongodb"

const DBNAME = process.env.MONGO_INITDB_DATABASE || "luminaires"

let bucket: GridFSBucket | null = null

export async function getBucket(): Promise<GridFSBucket> {
  try {
    if (!bucket) {
      console.log("üîß Initialisation du bucket GridFS...")
      const client = await clientPromise
      const db = client.db(DBNAME)
      bucket = new GridFSBucket(db, { bucketName: "uploads" })
      console.log("‚úÖ Bucket GridFS initialis√©")
    }
    return bucket
  } catch (error) {
    console.error("‚ùå Erreur lors de l'initialisation du bucket GridFS:", error)
    throw error
  }
}

export async function resetGridFS(): Promise<void> {
  try {
    console.log("üóëÔ∏è D√©but de la r√©initialisation GridFS...")
    const client = await clientPromise
    const db = client.db(DBNAME)

    // Supprimer les collections GridFS
    const collections = await db.listCollections().toArray()
    const gridfsCollections = collections.filter((col) => col.name.startsWith("uploads."))

    for (const collection of gridfsCollections) {
      await db.collection(collection.name).drop()
      console.log(`üóëÔ∏è Collection ${collection.name} supprim√©e`)
    }

    // R√©initialiser le bucket
    bucket = null
    console.log("‚úÖ GridFS r√©initialis√©")
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©initialisation GridFS:", error)
    throw error
  }
}
